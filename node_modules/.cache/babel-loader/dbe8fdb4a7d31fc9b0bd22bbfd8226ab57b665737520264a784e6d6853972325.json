{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n    const providerList = [];\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n    if (providers.EtherscanProvider) {\n      //try {\n      //    providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      //} catch(error) { }\n      // These networks are currently faulty on this provider\n      // @TODO: This goes away once they have fixed their nodes\n      const skip = [\"ropsten\"];\n      try {\n        const provider = new providers.EtherscanProvider(network);\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n    if (providers.PocketProvider) {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n      try {\n        const provider = new providers.PocketProvider(network);\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n    if (providerList.length === 0) {\n      return null;\n    }\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n    return providerList[0];\n  };\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n  return func;\n}\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n    return null;\n  };\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n  return func;\n}\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\"\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n    if (standard == null) {\n      return null;\n    }\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n  const standard = networks[network.name];\n  // Not a standard network; check that it is a valid network in general\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n    return network;\n  }\n  // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  }\n  // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n  let defaultProvider = network._defaultProvider || null;\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  }\n  // Standard Network (allow overriding the ENS address)\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","skip","provider","indexOf","name","AlchemyProvider","alchemy","PocketProvider","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sources":["/Users/vantwembeke/Github/DogSwap v2/node_modules/@ethersproject/networks/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider) {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider) {\n            //try {\n            //    providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            //} catch(error) { }\n\n            // These networks are currently faulty on this provider\n            // @TODO: This goes away once they have fixed their nodes\n            const skip = [ \"ropsten\" ];\n            try {\n                const provider = new providers.EtherscanProvider(network);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider) {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider) {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\" ];\n            try {\n                const provider = new providers.PocketProvider(network);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider) {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n     },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: { chainId: 137, name: \"matic\" },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAajC;AAED,SAASE,eAAeA,CAACC,KAAU;EAC/B,OAAQA,KAAK,IAAI,OAAOA,KAAK,CAACC,SAAU,KAAK,UAAU;AAC3D;AAEA,SAASC,kBAAkBA,CAACC,OAAyB;EACjD,MAAMC,IAAI,GAAG,SAAAA,CAASC,SAAc,EAAEC,OAAa;IAC/C,IAAIA,OAAO,IAAI,IAAI,EAAE;MAAEA,OAAO,GAAG,EAAG;;IACpC,MAAMC,YAAY,GAAe,EAAE;IAEnC,IAAIF,SAAS,CAACG,cAAc,EAAE;MAC1B,IAAI;QACAD,YAAY,CAACE,IAAI,CAAC,IAAIJ,SAAS,CAACG,cAAc,CAACL,OAAO,EAAEG,OAAO,CAACI,MAAM,CAAC,CAAC;OAC3E,CAAC,OAAMC,KAAK,EAAE;;IAGnB,IAAIN,SAAS,CAACO,iBAAiB,EAAE;MAC7B;MACA;MACA;MAEA;MACA;MACA,MAAMC,IAAI,GAAG,CAAE,SAAS,CAAE;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,IAAIT,SAAS,CAACO,iBAAiB,CAACT,OAAO,CAAC;QACzD,IAAIW,QAAQ,CAACX,OAAO,IAAIU,IAAI,CAACE,OAAO,CAACD,QAAQ,CAACX,OAAO,CAACa,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAChET,YAAY,CAACE,IAAI,CAACK,QAAQ,CAAC;;OAElC,CAAC,OAAMH,KAAK,EAAE;;IAGnB,IAAIN,SAAS,CAACY,eAAe,EAAE;MAC3B,IAAI;QACAV,YAAY,CAACE,IAAI,CAAC,IAAIJ,SAAS,CAACY,eAAe,CAACd,OAAO,EAAEG,OAAO,CAACY,OAAO,CAAC,CAAC;OAC7E,CAAC,OAAMP,KAAK,EAAE;;IAGnB,IAAIN,SAAS,CAACc,cAAc,EAAE;MAC1B;MACA;MACA;MACA;MACA,MAAMN,IAAI,GAAG,CAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAE;MAC/C,IAAI;QACA,MAAMC,QAAQ,GAAG,IAAIT,SAAS,CAACc,cAAc,CAAChB,OAAO,CAAC;QACtD,IAAIW,QAAQ,CAACX,OAAO,IAAIU,IAAI,CAACE,OAAO,CAACD,QAAQ,CAACX,OAAO,CAACa,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAChET,YAAY,CAACE,IAAI,CAACK,QAAQ,CAAC;;OAElC,CAAC,OAAMH,KAAK,EAAE;;IAGnB,IAAIN,SAAS,CAACe,kBAAkB,EAAE;MAC9B,IAAI;QACAb,YAAY,CAACE,IAAI,CAAC,IAAIJ,SAAS,CAACe,kBAAkB,CAACjB,OAAO,CAAC,CAAC;OAC/D,CAAC,OAAMQ,KAAK,EAAE;;IAGnB,IAAIJ,YAAY,CAACc,MAAM,KAAK,CAAC,EAAE;MAAE,OAAO,IAAI;;IAE5C,IAAIhB,SAAS,CAACiB,gBAAgB,EAAE;MAC5B,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIjB,OAAO,CAACiB,MAAM,IAAI,IAAI,EAAE;QACxBA,MAAM,GAAGjB,OAAO,CAACiB,MAAM;OAC1B,MAAM,IAAIpB,OAAO,KAAK,WAAW,EAAE;QAChCoB,MAAM,GAAG,CAAC;;MAEd,OAAO,IAAIlB,SAAS,CAACiB,gBAAgB,CAACf,YAAY,EAAEgB,MAAM,CAAC;;IAG/D,OAAOhB,YAAY,CAAC,CAAC,CAAC;EAC1B,CAAC;EAEDH,IAAI,CAACH,SAAS,GAAG,UAASE,OAAgB;IACtC,OAAOD,kBAAkB,CAACC,OAAO,CAAC;EACtC,CAAC;EAED,OAAOC,IAAI;AACf;AAEA,SAASoB,kBAAkBA,CAACC,GAAW,EAAEtB,OAAyB;EAC9D,MAAMC,IAAI,GAAG,SAAAA,CAASC,SAAc,EAAEC,OAAa;IAC/C,IAAID,SAAS,CAACqB,eAAe,EAAE;MAC3B,OAAO,IAAIrB,SAAS,CAACqB,eAAe,CAACD,GAAG,EAAEtB,OAAO,CAAC;;IAGtD,OAAO,IAAI;EACf,CAAC;EAEDC,IAAI,CAACH,SAAS,GAAG,UAASE,OAAgB;IACtC,OAAOqB,kBAAkB,CAACC,GAAG,EAAEtB,OAAO,CAAC;EAC3C,CAAC;EAED,OAAOC,IAAI;AACf;AAEA,MAAMuB,SAAS,GAAY;EACvBC,OAAO,EAAE,CAAC;EACVC,UAAU,EAAE,4CAA4C;EACxDb,IAAI,EAAE,WAAW;EACjBc,gBAAgB,EAAE5B,kBAAkB,CAAC,WAAW;CACnD;AAED,MAAM6B,OAAO,GAAY;EACrBH,OAAO,EAAE,CAAC;EACVC,UAAU,EAAE,4CAA4C;EACxDb,IAAI,EAAE,SAAS;EACfc,gBAAgB,EAAE5B,kBAAkB,CAAC,SAAS;CACjD;AAED,MAAM8B,aAAa,GAAY;EAC3BJ,OAAO,EAAE,EAAE;EACXZ,IAAI,EAAE,eAAe;EACrBc,gBAAgB,EAAEN,kBAAkB,CAAC,qCAAqC,EAAE,eAAe;CAC9F;AAED,MAAMS,QAAQ,GAAgC;EAC1CC,WAAW,EAAE;IAAEN,OAAO,EAAE,CAAC;IAAEZ,IAAI,EAAE;EAAa,CAAE;EAEhDW,SAAS,EAAEA,SAAS;EACpBQ,OAAO,EAAER,SAAS;EAElBS,MAAM,EAAE;IAAER,OAAO,EAAE,CAAC;IAAEZ,IAAI,EAAE;EAAQ,CAAE;EAEtCe,OAAO,EAAEA,OAAO;EAChBM,OAAO,EAAEN,OAAO;EAEhBO,OAAO,EAAE;IACLV,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE,4CAA4C;IACxDb,IAAI,EAAE,SAAS;IACfc,gBAAgB,EAAE5B,kBAAkB,CAAC,SAAS;GACjD;EAEDqC,KAAK,EAAE;IACHX,OAAO,EAAE,EAAE;IACXZ,IAAI,EAAE,OAAO;IACbc,gBAAgB,EAAE5B,kBAAkB,CAAC,OAAO;GAC/C;EAEDsC,MAAM,EAAE;IACJZ,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE,4CAA4C;IACxDb,IAAI,EAAE,QAAQ;IACdc,gBAAgB,EAAE5B,kBAAkB,CAAC,QAAQ;GAC/C;EAGF;EACAuC,OAAO,EAAE;IACLb,OAAO,EAAE,EAAE;IACXZ,IAAI,EAAE,SAAS;IACfc,gBAAgB,EAAEN,kBAAkB,CAAC,mCAAmC,EAAE,SAAS;GACtF;EAEDkB,aAAa,EAAE;IAAEd,OAAO,EAAE,EAAE;IAAEZ,IAAI,EAAE;EAAe,CAAE;EAErDgB,aAAa,EAAEA,aAAa;EAC5BW,cAAc,EAAEX,aAAa;EAE7BY,YAAY,EAAE;IACVhB,OAAO,EAAE,CAAC;IACVZ,IAAI,EAAE,cAAc;IACpBc,gBAAgB,EAAEN,kBAAkB,CAAC,qCAAqC,EAAE,cAAc;GAC7F;EAEDqB,IAAI,EAAE;IAAEjB,OAAO,EAAE,GAAG;IAAEZ,IAAI,EAAE;EAAM,CAAE;EAEpC8B,KAAK,EAAE;IAAElB,OAAO,EAAE,GAAG;IAAEZ,IAAI,EAAE;EAAO,CAAE;EACtC+B,QAAQ,EAAE;IAAEnB,OAAO,EAAE,KAAK;IAAEZ,IAAI,EAAE;EAAU,CAAE;EAE9CgC,GAAG,EAAE;IAAEpB,OAAO,EAAE,EAAE;IAAEZ,IAAI,EAAE;EAAK,CAAE;EACjCiC,IAAI,EAAE;IAAErB,OAAO,EAAE,EAAE;IAAEZ,IAAI,EAAE;EAAM;CACpC;AAED;;;;;;AAMA,OAAM,SAAUkC,UAAUA,CAAC/C,OAAmB;EAC1C;EACA,IAAIA,OAAO,IAAI,IAAI,EAAE;IAAE,OAAO,IAAI;;EAElC,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;IAC9B,KAAK,MAAMa,IAAI,IAAIiB,QAAQ,EAAE;MACzB,MAAMkB,QAAQ,GAAGlB,QAAQ,CAACjB,IAAI,CAAC;MAC/B,IAAImC,QAAQ,CAACvB,OAAO,KAAKzB,OAAO,EAAE;QAC9B,OAAO;UACHa,IAAI,EAAEmC,QAAQ,CAACnC,IAAI;UACnBY,OAAO,EAAEuB,QAAQ,CAACvB,OAAO;UACzBC,UAAU,EAAGsB,QAAQ,CAACtB,UAAU,IAAI,IAAK;UACzCC,gBAAgB,EAAGqB,QAAQ,CAACrB,gBAAgB,IAAI;SACnD;;;IAIT,OAAO;MACHF,OAAO,EAAEzB,OAAO;MAChBa,IAAI,EAAE;KACT;;EAGL,IAAI,OAAOb,OAAQ,KAAK,QAAQ,EAAE;IAC9B,MAAMgD,QAAQ,GAAGlB,QAAQ,CAAC9B,OAAO,CAAC;IAClC,IAAIgD,QAAQ,IAAI,IAAI,EAAE;MAAE,OAAO,IAAI;;IACnC,OAAO;MACHnC,IAAI,EAAEmC,QAAQ,CAACnC,IAAI;MACnBY,OAAO,EAAEuB,QAAQ,CAACvB,OAAO;MACzBC,UAAU,EAAEsB,QAAQ,CAACtB,UAAU;MAC/BC,gBAAgB,EAAGqB,QAAQ,CAACrB,gBAAgB,IAAI;KACnD;;EAGL,MAAMqB,QAAQ,GAAIlB,QAAQ,CAAC9B,OAAO,CAACa,IAAI,CAAC;EAExC;EACA,IAAI,CAACmC,QAAQ,EAAE;IACX,IAAI,OAAOhD,OAAO,CAACyB,OAAQ,KAAK,QAAQ,EAAE;MACtC9B,MAAM,CAACsD,kBAAkB,CAAC,yBAAyB,EAAE,SAAS,EAAEjD,OAAO,CAAC;;IAE5E,OAAOA,OAAO;;EAGlB;EACA,IAAIA,OAAO,CAACyB,OAAO,KAAK,CAAC,IAAIzB,OAAO,CAACyB,OAAO,KAAKuB,QAAQ,CAACvB,OAAO,EAAE;IAC/D9B,MAAM,CAACsD,kBAAkB,CAAC,0BAA0B,EAAE,SAAS,EAAEjD,OAAO,CAAC;;EAG7E;EACA;EACA,IAAIkD,eAAe,GAAwBlD,OAAO,CAAC2B,gBAAgB,IAAI,IAAI;EAC3E,IAAIuB,eAAe,IAAI,IAAI,IAAIF,QAAQ,CAACrB,gBAAgB,EAAE;IACtD,IAAI/B,eAAe,CAACoD,QAAQ,CAACrB,gBAAgB,CAAC,EAAE;MAC5CuB,eAAe,GAAGF,QAAQ,CAACrB,gBAAgB,CAAC7B,SAAS,CAACE,OAAO,CAAC;KACjE,MAAM;MACHkD,eAAe,GAAGF,QAAQ,CAACrB,gBAAgB;;;EAInD;EACA,OAAO;IACHd,IAAI,EAAEb,OAAO,CAACa,IAAI;IAClBY,OAAO,EAAEuB,QAAQ,CAACvB,OAAO;IACzBC,UAAU,EAAG1B,OAAO,CAAC0B,UAAU,IAAIsB,QAAQ,CAACtB,UAAU,IAAI,IAAK;IAC/DC,gBAAgB,EAAEuB;GACrB;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nexport class Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug(...args) {\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info(...args) {\n    this._log(Logger.levels.INFO, args);\n  }\n  warn(...args) {\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      try {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","Logger","constructor","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","toString","reason","throwError","name","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from"],"sources":["/Users/vantwembeke/Github/DogSwap v2/node_modules/@ethersproject/logger/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n};\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}